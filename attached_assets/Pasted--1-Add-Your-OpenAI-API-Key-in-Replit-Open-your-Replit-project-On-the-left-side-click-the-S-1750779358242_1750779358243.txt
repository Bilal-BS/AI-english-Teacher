🔐 1. Add Your OpenAI API Key in Replit
Open your Replit project.

On the left side, click the 🔒 "Secrets" (Environment Variables) icon.

Add a new secret:

vbnet
Copy
Edit
Key: OPENAI_API_KEY
Value: sk-xxxxxxx (your actual OpenAI secret key)
✅ Replit will now load this key securely inside your app using process.env.OPENAI_API_KEY.

🧠 2. Create the OpenAI Command File
Create a new file in your services or utils folder:
📄 openaiService.ts

Paste this code:

ts
Copy
Edit
import { Configuration, OpenAIApi } from "openai";

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

export async function getCorrectedConversation(userInput: string) {
  const prompt = `
You are a friendly English tutor. Always do two things:
1. Correct any grammar or spelling mistakes.
2. Continue the conversation naturally.

Format your response like this:
Corrected: <corrected sentence>
Reply: <friendly reply>

User: ${userInput}
`;

  const response = await openai.createChatCompletion({
    model: "gpt-4", // Use "gpt-3.5-turbo" if on free plan
    messages: [
      { role: "system", content: "You are a helpful English tutor." },
      { role: "user", content: prompt }
    ],
    temperature: 0.5,
  });

  return response.data.choices[0].message.content;
}
💬 3. Use the Command in React Component
Inside your React component (ConversationPractice.tsx):

tsx
Copy
Edit
import React, { useState } from "react";
import { getCorrectedConversation } from "../services/openaiService"; // adjust path

const ConversationPractice = () => {
  const [input, setInput] = useState("");
  const [corrected, setCorrected] = useState("");
  const [reply, setReply] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSend = async () => {
    if (!input.trim()) return;
    setLoading(true);
    try {
      const result = await getCorrectedConversation(input);

      const correctedText = result.match(/Corrected:\s*(.+)/i)?.[1]?.trim() || "";
      const replyText = result.match(/Reply:\s*(.+)/i)?.[1]?.trim() || "";

      setCorrected(correctedText);
      setReply(replyText);
    } catch (error) {
      console.error("OpenAI Error:", error);
      setCorrected("Error");
      setReply("Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <textarea value={input} onChange={(e) => setInput(e.target.value)} />
      <button onClick={handleSend}>{loading ? "Loading..." : "Send"}</button>

      {corrected && <p><strong>Corrected:</strong> {corrected}</p>}
      {reply && <p><strong>Reply:</strong> {reply}</p>}
    </div>
  );
};

export default ConversationPractice;
✅ 4. Test in Replit
Start your app.

Type: he go to park yestarday

Output should be:

vbnet
Copy
Edit
Corrected: He went to the park yesterday.
Reply: That sounds nice! Did he enjoy it?
🛡️ BONUS TIPS
Tip	What to Do
🔐 Keep API Key Safe	Always use process.env via Replit Secrets
🚀 Optimize speed	Use gpt-3.5-turbo if you want faster & cheaper
🧪 Test parsing	Use match(/Corrected:/) to reliably extract lines
📄 Format required	Always tell GPT to reply with Corrected: and Reply: format

Would you like me to also:

💾 Save the corrected history?

🎤 Add voice input?

🌍 Support Tamil or Sinhala explanations?