✍️ Grammar/spelling auto-correction

💬 AI conversation response

✅ Fully structured OpenAI API call

🧠 Formatted output for Corrected: and Reply:

✅ BACKEND (Auto-Correction + Conversation)
Create a file like openaiService.ts or use in your API route:

ts
Copy
Edit
// openaiService.ts
import { Configuration, OpenAIApi } from "openai";

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY, // Make sure this is set in Replit Secrets
});

const openai = new OpenAIApi(configuration);

export async function getCorrectedConversation(userInput: string) {
  const prompt = `
You are a friendly English teacher. Do two things:
1. Correct the user's grammar/spelling.
2. Reply like in a natural English conversation.
Always use this format:

Corrected: <corrected sentence>
Reply: <conversation reply>

User: ${userInput}
`;

  const chat = await openai.createChatCompletion({
    model: "gpt-4", // or "gpt-3.5-turbo"
    messages: [
      { role: "system", content: "You are a helpful English tutor." },
      { role: "user", content: prompt },
    ],
    temperature: 0.5,
  });

  return chat.data.choices[0].message.content;
}
✅ FRONTEND (React Component)
Create ConversationPractice.tsx:

tsx
Copy
Edit
import React, { useState } from "react";
import { getCorrectedConversation } from "../services/openaiService";

const ConversationPractice: React.FC = () => {
  const [input, setInput] = useState("");
  const [corrected, setCorrected] = useState("");
  const [reply, setReply] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSend = async () => {
    if (!input.trim()) return;
    setLoading(true);
    try {
      const response = await getCorrectedConversation(input);

      const correctedLine = response.match(/Corrected:\s*(.+)/i)?.[1]?.trim();
      const replyLine = response.match(/Reply:\s*(.+)/i)?.[1]?.trim();

      setCorrected(correctedLine || "Not found");
      setReply(replyLine || "Not found");
    } catch (err) {
      console.error(err);
      setCorrected("Error occurred.");
      setReply("");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-4 max-w-md mx-auto bg-white shadow rounded">
      <h2 className="text-xl font-bold mb-2">Conversation Practice</h2>
      <textarea
        className="w-full border p-2 rounded mb-2"
        rows={3}
        placeholder="Type your sentence..."
        value={input}
        onChange={(e) => setInput(e.target.value)}
      />
      <button
        onClick={handleSend}
        className="bg-blue-600 text-white px-4 py-2 rounded"
        disabled={loading}
      >
        {loading ? "Loading..." : "Send"}
      </button>

      {corrected && (
        <p className="mt-4 text-green-600">
          <strong>Corrected:</strong> {corrected}
        </p>
      )}
      {reply && (
        <p className="mt-2 text-blue-600">
          <strong>Reply:</strong> {reply}
        </p>
      )}
    </div>
  );
};

export default ConversationPractice;
🛠 REPLIT SETUP
Go to Replit sidebar → Secrets

Add:
OPENAI_API_KEY = your-real-key-here

🧪 Example Test
Input:
i not know where he go yestarday

Output:

vbnet
Copy
Edit
Corrected: I don't know where he went yesterday.
Reply: Maybe he went shopping or met a friend. Do you want to ask him?
Let me know if you want:

🌍 Multi-language support

🎙️ Voice input

📊 User progress tracking

I can help build that next!