 1. Replit Secrets Setup
Go to Replit sidebar ‚Üí Secrets (Environment variables) and add:

makefile
Copy
Edit
Key: OPENAI_API_KEY
Value: sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
üß† 2. Backend: openaiService.ts
Create a file in client/src/utils/openaiService.ts

ts
Copy
Edit
import { Configuration, OpenAIApi } from "openai";

const config = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(config);

export async function getCorrectedReply(userInput: string) {
  const prompt = `
You are a friendly English teacher. Do two things:
1. Correct grammar/spelling mistakes in the user's sentence.
2. Reply naturally as in a conversation.

Format exactly like this:
Corrected: <corrected sentence>
Reply: <friendly reply>

User: ${userInput}
`;

  const res = await openai.createChatCompletion({
    model: "gpt-4", // or "gpt-3.5-turbo"
    messages: [
      { role: "system", content: "You are a helpful English tutor." },
      { role: "user", content: prompt }
    ],
    temperature: 0.7,
  });

  return res.data.choices[0].message.content;
}
üí¨ 3. Frontend: ConversationPractice.tsx
Create or replace this in client/src/components/ConversationPractice.tsx

tsx
Copy
Edit
import React, { useState } from "react";
import { getCorrectedReply } from "../utils/openaiService";

const ConversationPractice = () => {
  const [input, setInput] = useState("");
  const [corrected, setCorrected] = useState("");
  const [reply, setReply] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSend = async () => {
    if (!input.trim()) return;
    setLoading(true);

    try {
      const fullReply = await getCorrectedReply(input);

      const correctedText = fullReply.match(/Corrected:\s*(.+)/i)?.[1]?.trim() || "";
      const replyText = fullReply.match(/Reply:\s*(.+)/i)?.[1]?.trim() || "";

      setCorrected(correctedText);
      setReply(replyText);
    } catch (err) {
      setCorrected("Error");
      setReply("Failed to process.");
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-4 max-w-md mx-auto bg-white rounded shadow">
      <h2 className="text-xl font-semibold mb-2">Practice English</h2>

      <textarea
        className="w-full border p-2 rounded"
        rows={3}
        placeholder="Type your sentence..."
        value={input}
        onChange={(e) => setInput(e.target.value)}
      />

      <button
        className="bg-blue-500 text-white mt-2 px-4 py-2 rounded"
        onClick={handleSend}
        disabled={loading}
      >
        {loading ? "Checking..." : "Send"}
      </button>

      {corrected && (
        <div className="mt-4 text-green-600">
          <strong>Corrected:</strong> {corrected}
        </div>
      )}
      {reply && (
        <div className="mt-2 text-blue-600">
          <strong>Reply:</strong> {reply}
        </div>
      )}
    </div>
  );
};

export default ConversationPractice;
‚úÖ 4. Example Test
You type:
i come yesterday school

AI replies:

vbnet
Copy
Edit
Corrected: I came to school yesterday.
Reply: That‚Äôs good! What did you learn at school?
‚úÖ Done!
Your OpenAI-powered conversation + grammar correction is now working in Replit.

Do you want me to:

Add voice input (üéôÔ∏è speak instead of type)?

Save user messages to a history log?

Support Sinhala or Tamil explanations?

Just say the word ‚Äî I can build the next upgrade!