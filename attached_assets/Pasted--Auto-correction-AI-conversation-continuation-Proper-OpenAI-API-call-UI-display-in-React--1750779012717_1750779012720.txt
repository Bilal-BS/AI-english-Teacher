âœ… Auto-correction

âœ… AI conversation continuation

âœ… Proper OpenAI API call

âœ… UI display in React (ConversationPractice.tsx)

ðŸ§  Backend API Call (OpenAI integration)
Create a file like openaiService.ts or put it in your backend server code:

ts
Copy
Edit
import { Configuration, OpenAIApi } from "openai";

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY, // Make sure this is set in Replit secrets
});

const openai = new OpenAIApi(configuration);

export async function getConversationResponse(userInput: string) {
  const systemPrompt = `You are a friendly English tutor. Always do two things:
1. Correct grammar/spelling in the user's sentence.
2. Then give a friendly conversational reply.

Format:
Corrected: <corrected version>
Reply: <your response>`;
  
  const response = await openai.createChatCompletion({
    model: "gpt-4", // Or "gpt-3.5-turbo" if gpt-4 is unavailable
    messages: [
      { role: "system", content: systemPrompt },
      { role: "user", content: userInput },
    ],
    temperature: 0.5,
  });

  return response.data.choices[0].message.content;
}
âœ… In Replit, add your key in Secrets (Environment Variables):
Go to Secrets â†’ Add key: OPENAI_API_KEY, value: your key from OpenAI dashboard.

ðŸŽ¯ Frontend Component (ConversationPractice.tsx)
tsx
Copy
Edit
import React, { useState } from "react";
import { getConversationResponse } from "../services/openaiService"; // Update path as needed

const ConversationPractice: React.FC = () => {
  const [userInput, setUserInput] = useState("");
  const [corrected, setCorrected] = useState("");
  const [reply, setReply] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async () => {
    if (!userInput.trim()) return;
    setLoading(true);
    try {
      const response = await getConversationResponse(userInput);

      // Parse response like: "Corrected: ...\nReply: ..."
      const correctedMatch = response.match(/Corrected:\s*(.+)/i);
      const replyMatch = response.match(/Reply:\s*(.+)/i);

      setCorrected(correctedMatch ? correctedMatch[1].trim() : "");
      setReply(replyMatch ? replyMatch[1].trim() : "");
    } catch (err) {
      console.error("OpenAI error:", err);
      setCorrected("");
      setReply("Sorry, I couldn't process your message.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-4 max-w-md mx-auto bg-white shadow-md rounded-md">
      <h2 className="text-xl font-semibold mb-2">Conversation Practice</h2>
      <textarea
        className="w-full p-2 border rounded"
        rows={3}
        placeholder="Type your message here..."
        value={userInput}
        onChange={(e) => setUserInput(e.target.value)}
      />
      <button
        className="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        onClick={handleSubmit}
        disabled={loading}
      >
        {loading ? "Thinking..." : "Send"}
      </button>

      {corrected && (
        <div className="mt-4 text-green-700">
          <strong>Corrected:</strong> {corrected}
        </div>
      )}
      {reply && (
        <div className="mt-2 text-blue-700">
          <strong>Reply:</strong> {reply}
        </div>
      )}
    </div>
  );
};

export default ConversationPractice;
ðŸ§ª Test Input
Type:

nginx
Copy
Edit
i no she go to the party last nite
Output should be:

Corrected: I know she went to the party last night.
Reply: Thatâ€™s fun! Did she enjoy it?